type: edu
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |+
    package tictactoe;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);
            String mainLine;
            while(true) {
                System.out.println("Input command:");
                mainLine = sc.nextLine();
                String[] params = mainLine.split(" ");
                if ("exit".equals(params[0])) {
                    break;
                } else {
                    if (params.length == 3) {
                        play(params[1], params[2]);
                    } else {
                        System.out.println("Bad parameters!");
                    }
                }
            }
        }

        public static void play(String t1, String t2) {
            Field mainField = new Field(t1, t2);
            mainField.printField();

            while(mainField.checkWin() == 0) {
                mainField.callStepManager();
            }
        }
    }

  learner_created: false
- name: src/tictactoe/Field.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;
    import java.util.Scanner;

    public class Field {
        private final char[][] field = new char[3][3];
        private boolean xTurn;
        private boolean oTurn;
        private final Scanner SC = new Scanner(System.in);
        private final Random random = new Random();
        private final Player firstPlayer;
        private final Player secondPlayer;

        public Field(String p1, String p2) {
            for(int i = 0; i < 3; ++i) {
                for(int j = 0; j < 3; ++j) {
                    field[i][j] = ' ';
                }
            }
            xTurn = true;
            oTurn = false;
            firstPlayer = new Player(p1);
            secondPlayer = new Player(p2);
        }

        public void callStepManager() {
            if (xTurn) {
                firstPlayer.makeStep(field, 'X');
                printField();
                xTurn = false;
                oTurn = true;
            } else {
                secondPlayer.makeStep(field, 'O');
                printField();
                xTurn = true;
                oTurn = false;
            }
        }
        public void printField() {
            System.out.println("---------");
            for(int i = 0; i < 3; ++i) {
                System.out.print("| ");
                for(int j = 0; j < 3; ++j) {
                    System.out.print(field[i][j]);
                    System.out.print(' ');
                }
                System.out.println('|');
            }
            System.out.println("---------");
        }

        public int checkWin() { //Draw = -1 None = 0 X = 1 O = 2
            int empty = 0;
            boolean x = false;
            boolean o = false;
            for(int i = 0; i < 3; ++i) {
                int xl = 0;
                int ol = 0;
                for(int j = 0; j < 3; ++j) {
                    if (field[i][j] == 'X') {
                        xl++;
                    } else if (field[i][j] == 'O') {
                        ol++;
                    } else {
                        empty++;
                    }
                }
                if (xl == 3) {
                    x = true;
                } else if (ol == 3) {
                    o = true;
                }
                int xc = 0;
                int oc = 0;
                for(int j = 0; j < 3; ++j) {
                    if (field[j][i] == 'X') {
                        xc++;
                    } else if (field[j][i] == 'O') {
                        oc++;
                    }
                }
                if (xc == 3) {
                    x = true;
                } else if (oc == 3) {
                    o = true;
                }
            }
            if (field[0][0] == field[1][1] && field[1][1] == field[2][2]) {
                if (field[0][0] == 'X') {
                    x = true;
                } else if (field[0][0] == 'O') {
                    o = true;
                }
            }
            if (field[2][0] == field[1][1] && field[1][1] == field[0][2]) {
                if (field[2][0] == 'X') {
                    x = true;
                } else if (field[2][0] == 'O') {
                    o = true;
                }
            }
            if (x) {
                System.out.println("X wins");
                return 1;
            } else if (o) {
                System.out.println("O wins");
                return 2;
            } else if (empty != 0) {
                return 0;
            } else {
                System.out.println("Draw");
                return -1;
            }
        }

        public void parseLine() {
            System.out.println("Enter the cells:");
            String line = SC.nextLine();
            int r = 0;
            int c = 0;
            int x = 0;
            int o = 0;
            for(int i = 0; i < 9; ++i) {
                field[r][c++] = line.charAt(i) == '_' ? ' ' : line.charAt(i);
                if (c > 2) {
                    r++;
                    c = 0;
                }
                if (line.charAt(i) == 'X') {
                    x++;
                } else if (line.charAt(i) == 'O') {
                    o++;
                }
            }
            if (o > x || o == x) {
                xTurn = true;
                oTurn = false;
            } else {
                xTurn = false;
                oTurn = true;
            }
        }
    }
  learner_created: false
- name: src/tictactoe/Player.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;
    import java.util.Scanner;

    public class Player {
        private String difficulty = null;
        private final Scanner SC = new Scanner(System.in);
        private final Random random = new Random();

        private void fillLine(char[][] field, int index, char type) {
            for(int i = 0; i < 3; ++i) {
                field[index][i] = type;
            }
        }

        private void addToLine(char[][] field, int index, char type) {
            for(int i = 0; i < 3; ++i) {
                if (field[index][i] == ' ') {
                    field[index][i] = type;
                    break;
                }
            }
        }

        private void addToColumn(char[][] field, int index, char type) {
            for(int i = 0; i < 3; ++i) {
                if (field[i][index] == ' ') {
                    field[i][index] = type;
                    break;
                }
            }
        }

        private void fillColumn(char[][] field, int index, char type) {
            for(int i = 0; i < 3; ++i) {
                field[i][index] = type;
            }
        }

        public Player(String type) {
            if (!"user".equals(type)) {
                difficulty = type;
            }
        }

        public void makeStep(char[][] field, char type) {
            if (difficulty == null) {
                humanStep(field, type);
            } else {
                if ("easy".equals(difficulty)) {
                    System.out.println("Making move level \"easy\"");
                    easyAIstep(field, type);
                } else if ("medium".equals(difficulty)) {
                    System.out.println("Making move level \"medium\"");
                    mediumAIstep(field, type);
                }
            }
        }

        public void mediumAIstep(char[][] field, char type) {
            //check opponent
            //check lines
            for(int i = 0; i < 3; ++i) {
                int emptyCount = 0;
                int nonTypeCount = 0;
                for(int j = 0; j < 3; ++j) {
                    if (field[i][j] != type && field[i][j] != ' ') {
                        nonTypeCount++;
                    } else if (field[i][j] == ' ') {
                        emptyCount++;
                    }
                }
                if (nonTypeCount == 2 && emptyCount == 1) {
                    addToLine(field, i, type);
                    return;
                }
            }
            //check opponent
            //check columns
            for(int i = 0; i < 3; ++i) {
                int emptyCount = 0;
                int nonTypeCount = 0;
                for(int j = 0; j < 3; ++j) {
                    if (field[j][i] != type && field[j][i] != ' ') {
                        nonTypeCount++;
                    } else if (field[j][i] == ' ') {
                        emptyCount++;
                    }
                }
                if (nonTypeCount == 2 && emptyCount == 1) {
                    addToColumn(field, i, type);
                    return;
                }
            }
            //check opponent
            //check diagonals
            int emptyCount = 0;
            int nonTypeCount = 0;
            for(int i = 0; i < 3; ++i) {
                if (field[i][i] != type && field[i][i] != ' ') {
                    nonTypeCount++;
                } else if (field[i][i] == ' ') {
                    emptyCount++;
                }
            }
            if (nonTypeCount == 2 && emptyCount == 1) {
                if (field[0][0] == ' ') {
                    field[0][0] = type;
                } else if (field[1][1] == ' ') {
                    field[1][1] = type;
                } else {
                    field[2][2] = type;
                }
                return;
            }
            emptyCount = 0;
            nonTypeCount = 0;
            for(int i = 0; i < 3; ++i) {
                if (field[i][2-i] != type && field[i][2-i] != ' ') {
                    nonTypeCount++;
                } else if (field[i][2-i] == ' ') {
                    emptyCount++;
                }
            }
            if (nonTypeCount == 2 && emptyCount == 1) {
                if (field[0][2] == ' ') {
                    field[0][2] = type;
                } else if (field[1][1] == ' ') {
                    field[1][1] = type;
                } else {
                    field[2][0] = type;
                }
                return;
            }


            //check my ways
            //check lines
            for(int i = 0; i < 3; ++i) {
                emptyCount = 0;
                int TypeCount = 0;
                for(int j = 0; j < 3; ++j) {
                    if (field[i][j] == type) {
                        TypeCount++;
                    } else if (field[i][j] == ' ') {
                        emptyCount++;
                    }
                }
                if (TypeCount == 2 && emptyCount == 1) {
                    fillLine(field, i, type);
                    return;
                }
            }
            //check my
            //check columns
            for(int i = 0; i < 3; ++i) {
                emptyCount = 0;
                int TypeCount = 0;
                for(int j = 0; j < 3; ++j) {
                    if (field[j][i] == type) {
                        TypeCount++;
                    } else if (field[j][i] == ' ') {
                        emptyCount++;
                    }
                }
                if (TypeCount == 2 && emptyCount == 1) {
                    fillColumn(field, i, type);
                    return;
                }
            }
            //check my
            //check diagonals
            emptyCount = 0;
            int TypeCount = 0;
            for(int i = 0; i < 3; ++i) {
                if (field[i][i] == type) {
                    TypeCount++;
                } else if (field[i][i] == ' ') {
                    emptyCount++;
                }
            }
            if (TypeCount == 2 && emptyCount == 1) {
                field[0][0] = field[1][1] = field[2][2] = type;
                return;
            }
            emptyCount = 0;
            TypeCount = 0;
            for(int i = 0; i < 3; ++i) {
                if (field[i][2-i] == type) {
                    TypeCount++;
                } else if (field[i][2-i] == ' ') {
                    emptyCount++;
                }
            }
            if (TypeCount == 2 && emptyCount == 1) {
                field[0][2] = field[1][1] = field[2][0] = type;
                return;
            }
            easyAIstep(field, type);
        }

        public void easyAIstep(char[][] field, char type) {
            while (true) {
                int x = random.nextInt(3);
                int y = random.nextInt(3);
                if (field[x][y] == ' ') {
                    field[x][y] = type;
                    break;
                }
            }
        }

        public void humanStep(char[][] field, char type) {
            System.out.println("Enter the coordinates:");
            int x;
            int y;
            while(true) {
                if (SC.hasNextInt()) {
                    x = SC.nextInt();
                    if (SC.hasNextInt()) {
                        y = SC.nextInt();
                        if (x < 1 || x > 3 || y < 1 || y > 3) {
                            System.out.println("Coordinates should be from 1 to 3!");
                        } else {
                            if (field[x-1][y-1] == ' ') {
                                field[x-1][y-1] = type;
                                break;
                            } else {
                                System.out.println("This cell is occupied! Choose another one!");
                            }
                        }
                    } else {
                        SC.nextLine();
                        System.out.println("You should enter numbers!");
                    }
                } else {
                    SC.nextLine();
                    System.out.println("You should enter numbers!");
                }
            }
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 11)
        CheckResult checkHardAi() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start user hard");
            Grid grid = Grid.fromOutput(output);
            Position nextMove = Minimax.getMove(grid, CellState.X);
            output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

            while (!output.toLowerCase().contains("win") && !output.toLowerCase().contains("draw")) {
                Grid gridAfterUserMove = Grid.fromOutput(output);
                Grid gridAfterAiMove = Grid.fromOutput(output, 2);
                Position aiMove = Grid.getMove(gridAfterUserMove, gridAfterAiMove);

                List<Position> correctMinimaxMovePositions = Minimax.getAvailablePositions(gridAfterUserMove, CellState.O);
                if (!correctMinimaxMovePositions.contains(aiMove)) {
                    return CheckResult.wrong("Your minimax algorithm is wrong! It chooses wrong positions to make a move!");
                }

                nextMove = Minimax.getMove(gridAfterAiMove, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 5, order = 12)
        CheckResult checkHardVsHard() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start hard hard");

            if (!output.toLowerCase().contains("draw")) {
                return CheckResult.wrong("The result of the game between minimax algorithms should be always 'Draw'!\n" +
                    "Make sure your output contains 'Draw'.");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Util.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement#comment
status: Solved
record: 4
