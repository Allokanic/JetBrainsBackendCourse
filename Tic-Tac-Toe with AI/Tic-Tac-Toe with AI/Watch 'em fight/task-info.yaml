type: edu
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |+
    package tictactoe;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);
            Field mainField = new Field();
            mainField.printField();

            while(mainField.checkWin() == 0) {
                mainField.callStepManager();
            }
        }
    }

  learner_created: false
- name: src/tictactoe/Field.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;
    import java.util.Scanner;

    public class Field {
        private final char[][] field = new char[3][3];
        private boolean xTurn;
        private boolean oTurn;
        private final Scanner SC = new Scanner(System.in);
        private final Random random = new Random();

        public Field() {
            for(int i = 0; i < 3; ++i) {
                for(int j = 0; j < 3; ++j) {
                    field[i][j] = ' ';
                }
            }
            xTurn = true;
            oTurn = false;
        }

        public void callStepManager() {
            if (xTurn) {
                makeStep();
            } else {
                makeAiStep();
            }
        }

        public void printField() {
            System.out.println("---------");
            for(int i = 0; i < 3; ++i) {
                System.out.print("| ");
                for(int j = 0; j < 3; ++j) {
                    System.out.print(field[i][j]);
                    System.out.print(' ');
                }
                System.out.println('|');
            }
            System.out.println("---------");
        }

        public void makeStep() {
            System.out.println("Enter the coordinates:");
            int x;
            int y;
            while(true) {
                if (SC.hasNextInt()) {
                    x = SC.nextInt();
                    if (SC.hasNextInt()) {
                        y = SC.nextInt();
                        if (x < 1 || x > 3 || y < 1 || y > 3) {
                            System.out.println("Coordinates should be from 1 to 3!");
                        } else {
                            if (field[x-1][y-1] == ' ') {
                                field[x-1][y-1] = 'X';
                                xTurn = false;
                                oTurn = true;
                                printField();
                                break;
                            } else {
                                System.out.println("This cell is occupied! Choose another one!");
                            }
                        }
                    } else {
                        SC.nextLine();
                        System.out.println("You should enter numbers!");
                    }
                } else {
                    SC.nextLine();
                    System.out.println("You should enter numbers!");
                }
            }
        }

        public void makeAiStep() {
            System.out.println("Making move level \"easy\"");
            while (true) {
                int x = random.nextInt(3);
                int y = random.nextInt(3);
                if (field[x][y] == ' ') {
                    field[x][y] = 'O';
                    break;
                }
            }
            oTurn = false;
            xTurn = true;
            printField();
        }

        public int checkWin() { //Draw = -1 None = 0 X = 1 O = 2
            int empty = 0;
            boolean x = false;
            boolean o = false;
            for(int i = 0; i < 3; ++i) {
                int xl = 0;
                int ol = 0;
                for(int j = 0; j < 3; ++j) {
                    if (field[i][j] == 'X') {
                        xl++;
                    } else if (field[i][j] == 'O') {
                        ol++;
                    } else {
                        empty++;
                    }
                }
                if (xl == 3) {
                    x = true;
                } else if (ol == 3) {
                    o = true;
                }
                int xc = 0;
                int oc = 0;
                for(int j = 0; j < 3; ++j) {
                    if (field[j][i] == 'X') {
                        xc++;
                    } else if (field[j][i] == 'O') {
                        oc++;
                    }
                }
                if (xc == 3) {
                    x = true;
                } else if (oc == 3) {
                    o = true;
                }
            }
            if (field[0][0] == field[1][1] && field[1][1] == field[2][2]) {
                if (field[0][0] == 'X') {
                    x = true;
                } else if (field[0][0] == 'O') {
                    o = true;
                }
            }
            if (field[2][0] == field[1][1] && field[1][1] == field[0][2]) {
                if (field[2][0] == 'X') {
                    x = true;
                } else if (field[2][0] == 'O') {
                    o = true;
                }
            }
            if (x) {
                System.out.println("X wins");
                return 1;
            } else if (o) {
                System.out.println("O wins");
                return 2;
            } else if (empty != 0) {
                //System.out.println("Game not finished");
                return 0;
            } else {
                System.out.println("Draw");
                return -1;
            }
        }

        public void parseLine() {
            System.out.println("Enter the cells:");
            String line = SC.nextLine();
            int r = 0;
            int c = 0;
            int x = 0;
            int o = 0;
            for(int i = 0; i < 9; ++i) {
                field[r][c++] = line.charAt(i) == '_' ? ' ' : line.charAt(i);
                if (c > 2) {
                    r++;
                    c = 0;
                }
                if (line.charAt(i) == 'X') {
                    x++;
                } else if (line.charAt(i) == 'O') {
                    o++;
                }
            }
            if (o > x || o == x) {
                xTurn = true;
                oTurn = false;
            } else {
                xTurn = false;
                oTurn = true;
            }
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }


        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Player.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/449/implement#comment
status: Solved
record: 2
