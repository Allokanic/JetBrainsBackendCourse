type: edu
files:
- name: src/calculator/ApplicationRunner.java
  visible: true
  text: |
    package calculator;

    public class ApplicationRunner {
        public static void main(String[] args) {
            new Calculator();
        }
    }
  learner_created: false
- name: src/calculator/Calculator.java
  visible: true
  text: "package calculator;\n\nimport javax.swing.*;\nimport javax.swing.text.JTextComponent;\n\
    import java.awt.*;\n\npublic class Calculator extends JFrame {\n\n    public Calculator()\
    \ {\n        super(\"Calculator\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\
    \        setSize(230, 350);\n        setLayout(null);\n        setLocationRelativeTo(null);\n\
    \n        initComponents();\n\n        setVisible(true);\n    }\n    \n    public\
    \ void initComponents() {\n        JTextComponent EquationTextField = new JTextField();\n\
    \        EquationTextField.setName(\"EquationTextField\");\n        EquationTextField.setBounds(40,25,\
    \ 140,25);\n        add(EquationTextField);\n\n        JButton acceptButton =\
    \ new JButton(\"=\");\n        acceptButton.setName(\"Equals\");\n        acceptButton.setBounds(65,\
    \ 205, 85, 35);\n        add(acceptButton);\n\n        acceptButton.addActionListener(e\
    \ -> {\n            String expr = EquationTextField.getText();\n            if\
    \ (expr.contains(\"+\")) {\n                String[] arguments = EquationTextField.getText().split(\"\
    \\\\+\");\n                int a = Integer.parseInt(arguments[0]);\n         \
    \       int b = Integer.parseInt(arguments[1]);\n                EquationTextField.setText(EquationTextField.getText()\
    \ + \"=\" + (a + b));\n            } else if (expr.contains(\"-\")) {\n      \
    \          String[] arguments = EquationTextField.getText().split(\"-\");\n  \
    \              int a = Integer.parseInt(arguments[0]);\n                int b\
    \ = Integer.parseInt(arguments[1]);\n                EquationTextField.setText(EquationTextField.getText()\
    \ + \"=\" + (a - b));\n            } else if (expr.contains(\"/\")) {\n      \
    \          String[] arguments = EquationTextField.getText().split(\"/\");\n  \
    \              int a = Integer.parseInt(arguments[0]);\n                int b\
    \ = Integer.parseInt(arguments[1]);\n                EquationTextField.setText(EquationTextField.getText()\
    \ + \"=\" + (a / b));\n            } else if (expr.contains(\"x\")) {\n      \
    \          String[] arguments = EquationTextField.getText().split(\"x\");\n  \
    \              int a = Integer.parseInt(arguments[0]);\n                int b\
    \ = Integer.parseInt(arguments[1]);\n                EquationTextField.setText(EquationTextField.getText()\
    \ + \"=\" + (a * b));\n            }\n        });\n        addNumberButtons(EquationTextField);\n\
    \    }\n\n    public void addNumberButtons(JTextComponent field) {\n        JButton\
    \ number7 = new JButton(\"7\");\n        number7.setBounds(20, 70, 40, 35);\n\
    \        number7.setName(\"Seven\");\n        add(number7);\n\n        number7.addActionListener(e\
    \ -> {\n            field.setText(field.getText() + \"7\");\n        });\n\n \
    \       JButton number8 = new JButton(\"8\");\n        number8.setBounds(65, 70,\
    \ 40, 35);\n        number8.setName(\"Eight\");\n        add(number8);\n\n   \
    \     number8.addActionListener(e -> {\n            field.setText(field.getText()\
    \ + \"8\");\n        });\n\n        JButton number9 = new JButton(\"9\");\n  \
    \      number9.setBounds(110, 70, 40, 35);\n        number9.setName(\"Nine\");\n\
    \        add(number9);\n\n        number9.addActionListener(e -> {\n         \
    \   field.setText(field.getText() + \"9\");\n        });\n\n        JButton number4\
    \ = new JButton(\"4\");\n        number4.setBounds(20, 115, 40, 35);\n       \
    \ number4.setName(\"Four\");\n        add(number4);\n\n        number4.addActionListener(e\
    \ -> {\n            field.setText(field.getText() + \"4\");\n        });\n\n \
    \       JButton number5 = new JButton(\"5\");\n        number5.setBounds(65, 115,\
    \ 40, 35);\n        number5.setName(\"Five\");\n        add(number5);\n\n    \
    \    number5.addActionListener(e -> {\n            field.setText(field.getText()\
    \ + \"5\");\n        });\n\n        JButton number6 = new JButton(\"6\");\n  \
    \      number6.setBounds(110, 115, 40, 35);\n        number6.setName(\"Six\");\n\
    \        add(number6);\n\n        number6.addActionListener(e -> {\n         \
    \   field.setText(field.getText() + \"6\");\n        });\n\n        JButton number1\
    \ = new JButton(\"1\");\n        number1.setBounds(20, 160, 40, 35);\n       \
    \ number1.setName(\"One\");\n        add(number1);\n\n        number1.addActionListener(e\
    \ -> {\n            field.setText(field.getText() + \"1\");\n        });\n\n \
    \       JButton number2 = new JButton(\"2\");\n        number2.setBounds(65, 160,\
    \ 40, 35);\n        number2.setName(\"Two\");\n        add(number2);\n\n     \
    \   number2.addActionListener(e -> {\n            field.setText(field.getText()\
    \ + \"2\");\n        });\n\n        JButton number3 = new JButton(\"3\");\n  \
    \      number3.setBounds(110, 160, 40, 35);\n        number3.setName(\"Three\"\
    );\n        add(number3);\n\n        number3.addActionListener(e -> {\n      \
    \      field.setText(field.getText() + \"3\");\n        });\n\n        JButton\
    \ number0 = new JButton(\"0\");\n        number0.setName(\"Zero\");\n        number0.setBounds(20,\
    \ 205, 40, 35);\n        add(number0);\n\n        number0.addActionListener(e\
    \ -> {\n            field.setText(field.getText() + \"0\");\n        });\n\n \
    \       JButton operatorAdd = new JButton(\"+\");\n        operatorAdd.setMargin(new\
    \ Insets(0, 0, 0, 0));\n        operatorAdd.setBounds(155, 160, 40, 35);\n   \
    \     operatorAdd.setName(\"Add\");\n        add(operatorAdd);\n\n        operatorAdd.addActionListener(e\
    \ -> {\n            field.setText(field.getText() + \"+\");\n        });\n\n \
    \       JButton operatorSubtract = new JButton(\"-\");\n        operatorSubtract.setMargin(new\
    \ Insets(0, 0, 0, 0));\n        operatorSubtract.setBounds(155, 205, 40, 35);\n\
    \        operatorSubtract.setName(\"Subtract\");\n        add(operatorSubtract);\n\
    \n        operatorSubtract.addActionListener(e -> {\n            field.setText(field.getText()\
    \ + \"-\");\n        });\n\n        JButton operatorDivide = new JButton(\"/\"\
    );\n        operatorDivide.setMargin(new Insets(0, 0, 0, 0));\n        operatorDivide.setBounds(155,\
    \ 70, 40, 35);\n        operatorDivide.setName(\"Divide\");\n        add(operatorDivide);\n\
    \n        operatorDivide.addActionListener(e -> {\n            field.setText(field.getText()\
    \ + \"/\");\n        });\n\n        JButton operatorMultiply = new JButton(\"\
    x\");\n        operatorMultiply.setMargin(new Insets(0, 0, 0, 0));\n        operatorMultiply.setBounds(155,\
    \ 115, 40, 35);\n        operatorMultiply.setName(\"Multiply\");\n        add(operatorMultiply);\n\
    \n        operatorMultiply.addActionListener(e -> {\n            field.setText(field.getText()\
    \ + \"x\");\n        });\n\n        JButton clear = new JButton(\"clear\");\n\
    \        clear.setBounds(20, 250, 175, 35);\n        add(clear);\n\n        clear.addActionListener(e\
    \ -> {\n            field.setText(\"\");\n        });\n    }\n}\n"
  learner_created: false
- name: test/CalculatorTest.java
  visible: false
  text: |-
    import calculator.Calculator;
    import org.assertj.swing.fixture.JButtonFixture;
    import org.assertj.swing.fixture.JLabelFixture;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;

    import java.util.Map;

    import static java.util.Map.entry;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;

    public class CalculatorTest extends SwingTest {

        private Map<Character, JButtonFixture> charToButtonMap;

        @SwingComponent(name = "Equals")
        private JButtonFixture mEqual;
        @SwingComponent(name = "Add")
        private JButtonFixture mAdd;
        @SwingComponent(name = "Subtract")
        private JButtonFixture mSub;
        @SwingComponent(name = "Divide")
        private JButtonFixture mDiv;
        @SwingComponent(name = "Multiply")
        private JButtonFixture mMult;
        @SwingComponent(name = "Zero")
        private JButtonFixture mZero;
        @SwingComponent(name = "One")
        private JButtonFixture mOne;
        @SwingComponent(name = "Two")
        private JButtonFixture mTwo;
        @SwingComponent(name = "Three")
        private JButtonFixture mThree;
        @SwingComponent(name = "Four")
        private JButtonFixture mFour;
        @SwingComponent(name = "Five")
        private JButtonFixture mFive;
        @SwingComponent(name = "Six")
        private JButtonFixture mSix;
        @SwingComponent(name = "Seven")
        private JButtonFixture mSeven;
        @SwingComponent(name = "Eight")
        private JButtonFixture mEight;
        @SwingComponent(name = "Nine")
        private JButtonFixture mNine;
        @SwingComponent(name = "Dot")
        private JButtonFixture mDot;
        @SwingComponent(name = "Clear")
        private JButtonFixture mClear;
        @SwingComponent(name = "Delete")
        private JButtonFixture mDel;

        @SwingComponent(name = "EquationLabel")
        private JLabelFixture mEquationLabel;
        @SwingComponent(name = "ResultLabel")
        private JLabelFixture mResultLabel;

        private final String divideSymbol = "\u00F7";
        private final String multiplySymbol = "\u00D7";
        private final String addSymbol = "\u002B";
        private final String subtractSymbol = "-";

        public CalculatorTest() {

            super(new Calculator());
        }

        private void typeText (String text, String expectedResult, boolean checkResult) {

            for (int i = 0; i < text.length(); i++) {
                JButtonFixture button = charToButtonMap.get(text.charAt(i));
                button.click();
            }
            try {
                if (checkResult) {
                    if (!mResultLabel.text().trim().equals(expectedResult)) {
                        throw new WrongAnswer("Result Label contains wrong number.\n" +
                            "    Your output: " + mResultLabel.text().trim() +
                            "\nExpected output: " + expectedResult);
                    }
                } else {
                    if (!mEquationLabel.text().trim().equals(expectedResult)) {
                        throw new WrongAnswer("Equation Label contains wrong number.\n" +
                            "    Your output: " + mEquationLabel.text()
                            .trim() + "\n" +
                            "Expected output: " + expectedResult);
                    }
                }
            } catch (NullPointerException e) {
                throw new WrongAnswer("Either Equation Label or Result Label is empty.");
            }

            mClear.click();
        }

        private void typeText (String text, String expectedResult, boolean checkResult,
                               String feedBack) {

            for (int i = 0; i < text.length(); i++) {
                JButtonFixture button = charToButtonMap.get(text.charAt(i));
                button.click();
            }
            try {
                if (checkResult) {
                    if (!mResultLabel.text().trim().equals(expectedResult)) {
                        throw new WrongAnswer(feedBack + "\n" + "Your output: " + mResultLabel.text() +
                                "\nExpected output: " + expectedResult);
                    }
                } else {
                    if (!mEquationLabel.text().trim().equals(expectedResult)) {
                        throw new WrongAnswer(feedBack + "\n" + "Your output: " + mEquationLabel.text() +
                                "\nExpected output: " + expectedResult);
                    }
                }
            } catch (NullPointerException e) {
                throw new WrongAnswer("Either Equation Label or Result Label is empty.");
            }

            mClear.click();
        }

        @DynamicTest
        CheckResult test1 () {

            charToButtonMap = Map.ofEntries(
                entry('0', mZero),
                entry('1', mOne),
                entry('2', mTwo),
                entry('3', mThree),
                entry('4', mFour),
                entry('5', mFive),
                entry('6', mSix),
                entry('7', mSeven),
                entry('8', mEight),
                entry('9', mNine),
                entry('+', mAdd),
                entry('-', mSub),
                entry('*', mMult),
                entry('/', mDiv),
                entry('=', mEqual),
                entry('.', mDot),
                entry('<', mDel),
                entry('C', mClear)

            );

            requireEnabled(mEqual, mAdd, mSub, mDiv, mMult, mOne, mTwo, mThree, mFour, mFive, mSix,
                mSeven, mEight, mNine, mZero, mDot, mClear, mDel, mEquationLabel,
                mResultLabel);

            requireVisible(mEqual, mAdd, mSub, mDiv, mMult, mOne, mTwo, mThree, mFour, mFive, mSix,
                mSeven, mEight, mNine, mZero, mDot, mClear, mDel, mEquationLabel,
                mResultLabel);

            return correct();
        }

        @DynamicTest()
        CheckResult test2 () {

            typeText("1", "1", false);
            typeText("1<", "", false,
                "Clicking on the Delete Button should delete the last character from the EquationLabel");
            typeText("111C", "", false,
                "Clicking on the Clear Button should delete all the characters from the EquationLabel");

            return correct();
        }

        // Pushing buttons
        @DynamicTest()
        CheckResult test3 () {

            typeText("1", "1", false);
            typeText("2", "2", false);
            typeText("3", "3", false);
            typeText("4", "4", false);
            typeText("5", "5", false);
            typeText("6", "6", false);
            typeText("7", "7", false);
            typeText("8", "8", false);
            typeText("9", "9", false);
            typeText("0", "0", false);
            typeText("+", "+", false);
            typeText("-", "-", false);
            typeText("*", multiplySymbol, false);
            typeText("/", divideSymbol, false);
            typeText(".", ".", false);

            return correct();
        }

        //Testing calculations
        @DynamicTest()
        CheckResult test4 () {
            typeText("9+1=", "10", true);
            typeText("1-99=", "-98", true);
            typeText("9/2=", "4.5", true);
            typeText("0/7=", "0", true);
            typeText("4.5*2=", "9", true);

            return correct();
        }

        //Test operator precedence
        @DynamicTest()
        CheckResult test5 () {
            //Add & Subtract
            typeText("11-5+4=", "10", true);
            typeText("2-17+5=", "-10", true);


            //Multiply & Divide
            typeText("9/2*8=", "36", true);

            //Combined
            typeText("2+3-5*6=", "-25", true);
            typeText("16+9-7/5=", "23.6", true);
            typeText("25+9/3-8*8=", "-36", true);
            typeText("3.8*7.5/2.5*5=", "57", true);
            typeText("9.2/2.3*12/2.4=", "20", true);

            return correct();
        }

    }
  learner_created: false
- name: src/calculator/OPN.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/191/stages/955/implement#comment
status: Solved
record: 2
